//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package handler

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/gin-gonic/gin"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &infoHandler_{}
		},
	})
	infoHandlerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &InfoHandler{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(infoHandlerStructDescriptor)
}

type infoHandler_ struct {
	SaveInfo_      func(c *gin.Context)
	Remove_        func(c *gin.Context)
	Update_        func(c *gin.Context)
	GetInfo_       func(c *gin.Context)
	QueryInfoList_ func(c *gin.Context)
}

func (i *infoHandler_) SaveInfo(c *gin.Context) {
	i.SaveInfo_(c)
}

func (i *infoHandler_) Remove(c *gin.Context) {
	i.Remove_(c)
}

func (i *infoHandler_) Update(c *gin.Context) {
	i.Update_(c)
}

func (i *infoHandler_) GetInfo(c *gin.Context) {
	i.GetInfo_(c)
}

func (i *infoHandler_) QueryInfoList(c *gin.Context) {
	i.QueryInfoList_(c)
}

type InfoHandlerIOCInterface interface {
	SaveInfo(c *gin.Context)
	Remove(c *gin.Context)
	Update(c *gin.Context)
	GetInfo(c *gin.Context)
	QueryInfoList(c *gin.Context)
}

var _infoHandlerSDID string

func GetInfoHandlerSingleton() (*InfoHandler, error) {
	if _infoHandlerSDID == "" {
		_infoHandlerSDID = util.GetSDIDByStructPtr(new(InfoHandler))
	}
	i, err := singleton.GetImpl(_infoHandlerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*InfoHandler)
	return impl, nil
}

func GetInfoHandlerIOCInterfaceSingleton() (InfoHandlerIOCInterface, error) {
	if _infoHandlerSDID == "" {
		_infoHandlerSDID = util.GetSDIDByStructPtr(new(InfoHandler))
	}
	i, err := singleton.GetImplWithProxy(_infoHandlerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(InfoHandlerIOCInterface)
	return impl, nil
}

type ThisInfoHandler struct {
}

func (t *ThisInfoHandler) This() InfoHandlerIOCInterface {
	thisPtr, _ := GetInfoHandlerIOCInterfaceSingleton()
	return thisPtr
}
