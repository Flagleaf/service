//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package _interface

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &router_{}
		},
	})
	routerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Router{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(routerStructDescriptor)
}

type router_ struct {
	Setup_ func() error
}

func (r *router_) Setup() error {
	return r.Setup_()
}

type RouterIOCInterface interface {
	Setup() error
}

var _routerSDID string

func GetRouterSingleton() (*Router, error) {
	if _routerSDID == "" {
		_routerSDID = util.GetSDIDByStructPtr(new(Router))
	}
	i, err := singleton.GetImpl(_routerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Router)
	return impl, nil
}

func GetRouterIOCInterfaceSingleton() (RouterIOCInterface, error) {
	if _routerSDID == "" {
		_routerSDID = util.GetSDIDByStructPtr(new(Router))
	}
	i, err := singleton.GetImplWithProxy(_routerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(RouterIOCInterface)
	return impl, nil
}

type ThisRouter struct {
}

func (t *ThisRouter) This() RouterIOCInterface {
	thisPtr, _ := GetRouterIOCInterfaceSingleton()
	return thisPtr
}
