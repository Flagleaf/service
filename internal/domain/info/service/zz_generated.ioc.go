//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package service

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &infoService_{}
		},
	})
	infoServiceStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &InfoService{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(infoServiceStructDescriptor)
}

type infoService_ struct {
	Save_ func()
}

func (i *infoService_) Save() {
	i.Save_()
}

type InfoServiceIOCInterface interface {
	Save()
}

var _infoServiceSDID string

func GetInfoServiceSingleton() (*InfoService, error) {
	if _infoServiceSDID == "" {
		_infoServiceSDID = util.GetSDIDByStructPtr(new(InfoService))
	}
	i, err := singleton.GetImpl(_infoServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*InfoService)
	return impl, nil
}

func GetInfoServiceIOCInterfaceSingleton() (InfoServiceIOCInterface, error) {
	if _infoServiceSDID == "" {
		_infoServiceSDID = util.GetSDIDByStructPtr(new(InfoService))
	}
	i, err := singleton.GetImplWithProxy(_infoServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(InfoServiceIOCInterface)
	return impl, nil
}

type ThisInfoService struct {
}

func (t *ThisInfoService) This() InfoServiceIOCInterface {
	thisPtr, _ := GetInfoServiceIOCInterfaceSingleton()
	return thisPtr
}
