//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package message

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &consumer_{}
		},
	})
	consumerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Consumer{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(consumerStructDescriptor)
}

type consumer_ struct {
	Start_ func() error
}

func (c *consumer_) Start() error {
	return c.Start_()
}

type ConsumerIOCInterface interface {
	Start() error
}

var _consumerSDID string

func GetConsumerSingleton() (*Consumer, error) {
	if _consumerSDID == "" {
		_consumerSDID = util.GetSDIDByStructPtr(new(Consumer))
	}
	i, err := singleton.GetImpl(_consumerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Consumer)
	return impl, nil
}

func GetConsumerIOCInterfaceSingleton() (ConsumerIOCInterface, error) {
	if _consumerSDID == "" {
		_consumerSDID = util.GetSDIDByStructPtr(new(Consumer))
	}
	i, err := singleton.GetImplWithProxy(_consumerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(ConsumerIOCInterface)
	return impl, nil
}

type ThisConsumer struct {
}

func (t *ThisConsumer) This() ConsumerIOCInterface {
	thisPtr, _ := GetConsumerIOCInterfaceSingleton()
	return thisPtr
}
