//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package repository

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"service/internal/domain/info/do"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &infoRepositoryImpl_{}
		},
	})
	infoRepositoryImplStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &InfoRepositoryImpl{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(infoRepositoryImplStructDescriptor)
}

type infoRepositoryImpl_ struct {
	Insert_             func(do do.InfoDo) int64
	BatchInsert_        func(dos []do.InfoDo) int64
	DeleteByPrimaryKey_ func(id int64) int64
	DeleteByParam_      func(param do.InfoDoParam) int64
	UpdateByPrimaryKey_ func(do do.InfoDo) int64
	UpdateByParam_      func(do do.InfoDo, param do.InfoDoParam) int64
	CountByParam_       func(param do.InfoDoParam) int64
	SelectByPrimaryKey_ func(id int64) do.InfoDo
	SelectByParam_      func(param do.InfoDoParam) []do.InfoDo
}

func (i *infoRepositoryImpl_) Insert(do do.InfoDo) int64 {
	return i.Insert_(do)
}

func (i *infoRepositoryImpl_) BatchInsert(dos []do.InfoDo) int64 {
	return i.BatchInsert_(dos)
}

func (i *infoRepositoryImpl_) DeleteByPrimaryKey(id int64) int64 {
	return i.DeleteByPrimaryKey_(id)
}

func (i *infoRepositoryImpl_) DeleteByParam(param do.InfoDoParam) int64 {
	return i.DeleteByParam_(param)
}

func (i *infoRepositoryImpl_) UpdateByPrimaryKey(do do.InfoDo) int64 {
	return i.UpdateByPrimaryKey_(do)
}

func (i *infoRepositoryImpl_) UpdateByParam(do do.InfoDo, param do.InfoDoParam) int64 {
	return i.UpdateByParam_(do, param)
}

func (i *infoRepositoryImpl_) CountByParam(param do.InfoDoParam) int64 {
	return i.CountByParam_(param)
}

func (i *infoRepositoryImpl_) SelectByPrimaryKey(id int64) do.InfoDo {
	return i.SelectByPrimaryKey_(id)
}

func (i *infoRepositoryImpl_) SelectByParam(param do.InfoDoParam) []do.InfoDo {
	return i.SelectByParam_(param)
}

type InfoRepositoryImplIOCInterface interface {
	Insert(do do.InfoDo) int64
	BatchInsert(dos []do.InfoDo) int64
	DeleteByPrimaryKey(id int64) int64
	DeleteByParam(param do.InfoDoParam) int64
	UpdateByPrimaryKey(do do.InfoDo) int64
	UpdateByParam(do do.InfoDo, param do.InfoDoParam) int64
	CountByParam(param do.InfoDoParam) int64
	SelectByPrimaryKey(id int64) do.InfoDo
	SelectByParam(param do.InfoDoParam) []do.InfoDo
}

var _infoRepositoryImplSDID string

func GetInfoRepositoryImplSingleton() (*InfoRepositoryImpl, error) {
	if _infoRepositoryImplSDID == "" {
		_infoRepositoryImplSDID = util.GetSDIDByStructPtr(new(InfoRepositoryImpl))
	}
	i, err := singleton.GetImpl(_infoRepositoryImplSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*InfoRepositoryImpl)
	return impl, nil
}

func GetInfoRepositoryImplIOCInterfaceSingleton() (InfoRepositoryImplIOCInterface, error) {
	if _infoRepositoryImplSDID == "" {
		_infoRepositoryImplSDID = util.GetSDIDByStructPtr(new(InfoRepositoryImpl))
	}
	i, err := singleton.GetImplWithProxy(_infoRepositoryImplSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(InfoRepositoryImplIOCInterface)
	return impl, nil
}

type ThisInfoRepositoryImpl struct {
}

func (t *ThisInfoRepositoryImpl) This() InfoRepositoryImplIOCInterface {
	thisPtr, _ := GetInfoRepositoryImplIOCInterfaceSingleton()
	return thisPtr
}
